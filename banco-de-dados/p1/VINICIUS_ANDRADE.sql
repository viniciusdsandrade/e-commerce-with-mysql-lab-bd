# Exerc√≠cio 1
# Qual a import√¢ncia de se criar um banco de dados utilizando utf8mb4_unicode_ci ?

# Resposta:
# Usar utf8mb4_unicode_ci em um banco de dados √© importante porque garante que voc√™ consiga armazenar todos os tipos de caracteres, incluindo emojis e s√≠mbolos especiais que n√£o cabem na codifica√ß√£o utf8 comum.
# Al√©m disso, ele lida melhor com diferentes idiomas, organizando corretamente as palavras de acordo com as regras de ordena√ß√£o Unicode e sem se importar com mai√∫sculas ou min√∫sculas.
# Isso √© especialmente √∫til em sistemas globais, onde voc√™ precisa garantir que tudo seja armazenado e comparado de forma correta, independente da l√≠ngua ou dos s√≠mbolos usados.

# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Exerc√≠cio 2
# Crie uma tabela para armazenar informa√ß√µes de alunos. Inicialmente, a tabela deve conter as seguintes colunas:
# ‚Ä¢ id (inteiro, chave prim√°ria, auto_increment)
# ‚Ä¢ nome (texto, at√© 100 caracteres)
# 1. Escreva o comando SQL para criar a tabela alunos com essas especifica√ß√µes.
# Ap√≥s a cria√ß√£o da tabela, foi solicitado que uma nova coluna chamada data_nascimento do tipo DATE fosse adicionada
# 2. Escreva o comando SQL para adicionar a coluna data_nascimento ap√≥s a cria√ß√£o da tabela.
# 3. Explique brevemente o que cada comando faz.

# Resposta:
DROP DATABASE IF EXISTS db_escola;
CREATE DATABASE IF NOT EXISTS db_escola CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE db_escola;

CREATE TABLE IF NOT EXISTS tb_alunos
(
    id   INT AUTO_INCREMENT,
    nome VARCHAR(100),

    PRIMARY KEY (id)
);

ALTER TABLE tb_alunos
    ADD COLUMN data_nascimento DATE;

# O comando DROP DATABASE IF EXISTS db_escola; exclui o banco de dados db_escola, caso ele exista.
# O comando CREATE DATABASE IF NOT EXISTS db_escola CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; cria o banco de dados db_escola, caso ele n√£o exista, com o conjunto de caracteres utf8mb4_unicode_ci.
# O comando USE db_escola; seleciona o banco de dados db_escola.
# O comando CREATE TABLE IF NOT EXISTS tb_alunos cria a tabela tb_alunos, caso ela n√£o exista, com as colunas id e nome.
# O comando ALTER TABLE tb_alunos ADD COLUMN data_nascimento DATE; adiciona a coluna data_nascimento do tipo DATE √† tabela tb_alunos.

# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Exerc√≠cio 3
# Seu gerente pediu um relat√≥rio com os produtos que:
#  cont√©m maior estoque em seu dep√≥sito, e sua m√©dia de vendas no anual,
#  este relat√≥rio deve exibir o nome do produto, c√≥digo do produto, quantidade em estoque e a m√©dia de vendas.
# a - Que comando SQL deveria ser utilizado para criar esta lista?
# b - Crie a tabela e um SQL que mostre a utiliza√ß√£o deste comando.

# Resposta:

DROP DATABASE IF EXISTS db_estoque;
CREATE DATABASE IF NOT EXISTS db_estoque;
USE db_estoque;

-- Cria√ß√£o da tabela de produtos
CREATE TABLE IF NOT EXISTS tb_produtos
(
    id      INT AUTO_INCREMENT,
    nome    VARCHAR(100) NOT NULL,
    codigo  VARCHAR(10)  NOT NULL,
    estoque INT          NOT NULL,
    vendas  INT          NOT NULL, -- Considerando que esse √© o total anual de vendas

    PRIMARY KEY (id)
);

-- Inser√ß√£o de produtos na tabela
INSERT INTO tb_produtos (nome, codigo, estoque, vendas)
VALUES ('Produto A', 'A001', 100, 50),
       ('Produto B', 'B002', 200, 100),
       ('Produto C', 'C003', 300, 150),
       ('Produto D', 'D004', 400, 200);

-- Sele√ß√£o dos produtos ordenados por maior estoque
-- Como a "m√©dia de vendas anual" n√£o est√° detalhada, vamos assumir que j√° seja o valor de vendas inserido
SELECT nome, codigo, estoque, vendas AS media_vendas
FROM tb_produtos
ORDER BY estoque DESC;


-- Sele√ß√£o dos produtos ordenados por maior estoque
-- Como a "m√©dia de vendas anual" n√£o est√° detalhada, vamos assumir que j√° seja o valor de 'vendas' inserido
SELECT nome, codigo, estoque, vendas AS media_vendas
FROM tb_produtos
ORDER BY estoque DESC;

# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Exerc√≠cio 4
# Voc√™ foi contratado para um novo emprego como DBA, sua primeira tarefa ser√° analisar todas as rotinas criadas pela equipe anterior,
# ao iniciar seu trabalho detectou-se a utiliza√ß√£o excessiva do comando (SELECT *) para gerar os relat√≥rios criados pela equipe.
# A - Qual seria sua avalia√ß√£o sobre estes relat√≥rios?
# B - O que deve ser feito?

# Resposta:

# A - Avalia√ß√£o: Usar SELECT * em relat√≥rios n√£o √© uma boa pr√°tica. Isso faz com que o banco de dados traga todas as colunas da tabela, mesmo aquelas que podem n√£o ser necess√°rias para o relat√≥rio.
# Isso pode deixar as consultas mais lentas, especialmente se as tabelas forem grandes, e pode aumentar o consumo de recursos, tanto do banco quanto da rede, sem nenhum benef√≠cio claro.
# Al√©m disso, usar SELECT * torna o c√≥digo menos claro e mais dif√≠cil de manter, j√° que n√£o sabemos exatamente quais colunas est√£o sendo usadas.

# B - A√ß√£o: Em vez de usar SELECT *, o ideal √© selecionar apenas as colunas que realmente s√£o necess√°rias para o relat√≥rio. Para isso, uma auditoria inicial das consultas deve ser feita,
# identificando quais colunas s√£o realmente utilizadas nos relat√≥rios e ajustando as consultas para selecionar apenas esses campos. Isso otimiza o desempenho das consultas e melhora a clareza do c√≥digo.
# Al√©m disso, revisar e refatorar essas consultas para incluir apenas os dados relevantes podem trazer benef√≠cios de performance e facilitar a manuten√ß√£o futura.

# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Exerc√≠cio 5
# Voc√™ est√° desenvolvendo um sistema para armazenar as rea√ß√µes dos usu√°rios a uma pesquisa de satisfa√ß√£o. Cada usu√°rio pode reagir com diferentes tipos de emojis. A tabela deve registrar as seguintes informa√ß√µes:
# ‚Ä¢ id (inteiro, chave prim√°ria, auto_incremento)
# ‚Ä¢ usuario_id (inteiro, identificando o usu√°rio que fez a rea√ß√£o)
# ‚Ä¢ pesquisa_id (inteiro, identificando a pesquisa √† qual a rea√ß√£o pertence)
# ‚Ä¢ tipo_reacao (varchar, podendo ser um dos seguintes valores: 'üòÄ', 'üòê', 'üò¢')
# ‚Ä¢ data_reacao (TIMESTAMP, registrando a data e hora da rea√ß√£o, com o valor padr√£o sendo a data e hora atual)
# 1. Escreva o comando SQL para criar a tabela rea√ß√µes.
# 2. Inclua duas linhas a tabela
# 3. Explique brevemente o que cada parte do comando faz.

DROP DATABASE IF EXISTS db_pet_shop;
CREATE DATABASE IF NOT EXISTS db_pet_shop;
USE db_pet_shop;

-- Cria√ß√£o da tabela rea√ß√µes
CREATE TABLE IF NOT EXISTS reacoes
(
    id          INT AUTO_INCREMENT,
    usuario_id  INT NOT NULL,
    pesquisa_id INT NOT NULL,
    tipo_reacao VARCHAR(4) CHECK (tipo_reacao IN ('üòÄ', 'üòê', 'üò¢')),
    data_reacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    PRIMARY KEY (id)
) CHARACTER SET utf8mb4
  COLLATE utf8mb4_unicode_ci;

-- Inser√ß√£o de duas linhas na tabela rea√ß√µes
INSERT INTO reacoes (usuario_id, pesquisa_id, tipo_reacao)
VALUES (3, 1, 'üò¢'),
       (1, 2, 'üòÄ');


# O comando DROP DATABASE IF EXISTS db_pet_shop; exclui o banco de dados db_pet_shop, caso ele exista.
# O comando CREATE DATABASE IF NOT EXISTS db_pet_shop; cria o banco de dados db_pet_shop, caso ele n√£o exista.
# O comando USE db_pet_shop; seleciona o banco de dados db_pet_shop.
# O comando CREATE TABLE IF NOT EXISTS reacoes cria a tabela reacoes, caso ela n√£o exista, com as colunas id, usuario_id, pesquisa_id, tipo_reacao e data_reacao.
# A coluna id √© a chave prim√°ria da tabela, com auto_incremento.
# A coluna usuario_id armazena o identificador do usu√°rio que fez a rea√ß√£o.
# A coluna pesquisa_id armazena o identificador da pesquisa √† qual a rea√ß√£o pertence.
# A coluna tipo_reacao armazena o tipo de rea√ß√£o do usu√°rio, sendo restrita aos valores 'üòÄ', 'üòê' e 'üò¢'.
# A coluna data_reacao armazena a data e hora da rea√ß√£o, com o valor padr√£o sendo a data e hora atual.
# O comando INSERT INTO reacoes (usuario_id, pesquisa_id, tipo_reacao) insere duas linhas na tabela reacoes com os valores especificados para as colunas usuario_id, pesquisa_id e tipo_reacao.

# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Exerc√≠cio 6
# Crie uma tabela que contenha o campo status que receba apenas os valores 'Pendente', 'Em Progresso' ou 'Conclu√≠da'. Qualquer outro valor seja considerado inv√°lido pelo MySQL.
# a) A tabela criada deve conter os campos id, t√≠tulo, descri√ß√£o, status, data cria√ß√£o.
# b) Adicione um campo prioridade onde so possa receber os valores predefinidos de 'Baixa', 'M√©dia' e 'Alta'.
# c) Insira 3 linhas a esta tabela.

DROP DATABASE IF EXISTS db_tarefas;
CREATE DATABASE IF NOT EXISTS db_tarefas;
USE db_tarefas;

-- Cria√ß√£o da tabela tarefas
CREATE TABLE IF NOT EXISTS tarefas
(
    id           INT AUTO_INCREMENT,
    titulo       VARCHAR(100) NOT NULL,
    descricao    TEXT,
    status       VARCHAR(20) CHECK (status IN ('Pendente', 'Em Progresso', 'Conclu√≠da')),
    prioridade   VARCHAR(10) CHECK (prioridade IN ('Baixa', 'M√©dia', 'Alta')),
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    PRIMARY KEY (id)
) CHARACTER SET utf8mb4
  COLLATE utf8mb4_unicode_ci;

-- Inser√ß√£o de tr√™s linhas na tabela tarefas
INSERT INTO tarefas (titulo, descricao, status, prioridade)
VALUES ('Tarefa 1', 'Descri√ß√£o da Tarefa 1', 'Pendente', 'Baixa'),
       ('Tarefa 2', 'Descri√ß√£o da Tarefa 2', 'Em Progresso', 'M√©dia'),
       ('Tarefa 3', 'Descri√ß√£o da Tarefa 3', 'Conclu√≠da', 'Alta');

# O comando DROP DATABASE IF EXISTS db_tarefas; exclui o banco de dados db_tarefas, caso ele exista.
# O comando CREATE DATABASE IF NOT EXISTS db_tarefas; cria o banco de dados db_tarefas, caso ele n√£o exista.
# O comando USE db_tarefas; seleciona o banco de dados db_tarefas.
# O comando CREATE TABLE IF NOT EXISTS tarefas cria a tabela tarefas, caso ela n√£o exista, com as colunas id, titulo, descricao, status, prioridade e data_criacao.
# A coluna id √© a chave prim√°ria da tabela, com auto_incremento.
# A coluna titulo armazena o t√≠tulo da tarefa.
# A coluna descricao armazena a descri√ß√£o da tarefa.
# A coluna status armazena o status da tarefa, sendo restrita aos valores 'Pendente', 'Em Progresso' e 'Conclu√≠da'.
# A coluna prioridade armazena a prioridade da tarefa, sendo restrita aos valores 'Baixa', 'M√©dia' e 'Alta'.
# A coluna data_criacao armazena a data e hora de cria√ß√£o da tarefa, com o valor padr√£o sendo a data e hora atual.
# O comando INSERT INTO tarefas (titulo, descricao, status, prioridade) insere tr√™s linhas na tabela tarefas com os valores especificados para as colunas titulo, descricao, status e prioridade.
